{"version":3,"sources":["actions/index.ts","todo-app/AddTodo.tsx","todo-app/Todo.tsx","todo-app/TodoList.tsx","todo-app/FilterLink.tsx","todo-app/Footer.tsx","todo-app/TodoApp.tsx","todo-app/index.ts","reducers/todos.ts","reducers/visibilityFilter.ts","reducers/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["nextTodoId","ADD_TODO","SET_VISIBILITY_FILTER","TOGGLE_TODO","React","memo","dispatch","useDispatch","_useState","useState","_useState2","Object","slicedToArray","todoText","setTodoText","react_default","a","createElement","style","display","type","value","onChange","event","target","width","flex","onClick","payload","id","text","props","todo","textDecoration","completed","getVisibleTodos","todos","filter","t","useSelector","state","visibilityFilter","Fragment","map","todo_app_Todo","key","children","href","concat","preventDefault","todo_app_FilterLink","TodoApp","todo_app_AddTodo","todo_app_TodoList","todo_app_Footer","arguments","length","undefined","action","toConsumableArray","objectSpread","todoApp","combineReducers","store","createStore","App","es","todo_app","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d1b0dfa.chunk.js","sourcesContent":["let nextTodoId = 0;\nconst ADD_TODO = 'ADD_TODO';\nconst SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\n\n/**\n * 创建添加待办事项的动作\n *\n * @param text 待办事项标题\n */\nfunction addTodo(text: string) {\n  return {\n    type: ADD_TODO,\n    payload: {\n      id: nextTodoId++,\n      text,\n    },\n  };\n}\n\n/**\n * 创建设置可见性过滤条件的动作\n *\n * @param filter 过滤条件\n */\nfunction setVisibilityFilter(filter: VISIBILITY_FILTER) {\n  return {\n    type: SET_VISIBILITY_FILTER,\n    payload: filter,\n  };\n}\n\n/**\n * 创建切换待办事项状态的动作\n *\n * @param id 待办事项id\n */\nfunction toggleTodo(id: number) {\n  return {\n    type: TOGGLE_TODO,\n    payload: id,\n  };\n}\n\nexport {\n  addTodo,\n  setVisibilityFilter,\n  toggleTodo,\n  ADD_TODO,\n  SET_VISIBILITY_FILTER,\n  TOGGLE_TODO,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from '../actions';\n\n/**\n * 添加待办事项组件\n */\nfunction AddTodo() {\n  const dispatch = useDispatch();\n  const [todoText, setTodoText] = useState('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTodoText(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    dispatch(addTodo(todoText));\n    setTodoText('');\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <input\n        type=\"text\"\n        value={todoText}\n        onChange={handleChange}\n        style={{ width: 'auto', flex: 1 }}\n      />\n      <button type=\"button\" onClick={handleSubmit}>\n        添加\n      </button>\n    </div>\n  );\n}\n\nexport default React.memo(AddTodo);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleTodo } from '../actions';\n\ninterface Props {\n  todo: Todo;\n}\n\n/**\n * 待办事项\n *\n * @param {Props} props\n */\nfunction Todo(props: Props) {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    dispatch(toggleTodo(props.todo.id));\n  };\n\n  return (\n    <li\n      onClick={handleClick}\n      style={{\n        textDecoration: props.todo.completed ? 'line-through' : 'none',\n      }}\n    >\n      {props.todo.text}\n    </li>\n  );\n}\n\nexport default React.memo(Todo);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Todo from './Todo';\n\n/**\n * 获取可见的待办事项\n *\n * @param todos 待办事项列表\n * @param filter 过滤条件\n */\nconst getVisibleTodos = (todos: Todo[], filter: VISIBILITY_FILTER) => {\n  switch (filter) {\n    case 'SHOW_COMPLETED':\n      return todos.filter((t) => t.completed);\n    case 'SHOW_ACTIVE':\n      return todos.filter((t) => !t.completed);\n    case 'SHOW_ALL':\n    default:\n      return todos;\n  }\n};\n\n/**\n * 待办事项列表\n */\nfunction TodoList() {\n  const todos = useSelector((state: State) =>\n    getVisibleTodos(state.todos, state.visibilityFilter),\n  );\n\n  return (\n    <>\n      <h2>待办事项清单</h2>\n      <ul>\n        {todos.map((todo) => (\n          <Todo key={todo.id} todo={todo} />\n        ))}\n      </ul>\n    </>\n  );\n}\n\nexport default React.memo(TodoList);\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\n\ninterface Props {\n  /**\n   * 过滤条件\n   */\n  filter: VISIBILITY_FILTER;\n  /**\n   * 链接显示的内容\n   */\n  children: React.ReactNode;\n}\n\n/**\n * 过滤链接组件\n */\nfunction FilterLink(props: Props) {\n  const dispatch = useDispatch();\n  const currentFilter = useSelector((state: State) => state.visibilityFilter);\n  const isActive = currentFilter === props.filter;\n\n  const handleClick = (event: React.MouseEvent) => {\n    event.preventDefault();\n    dispatch(setVisibilityFilter(props.filter));\n  };\n\n  if (isActive) {\n    return <span>{props.children}</span>;\n  }\n\n  return (\n    <a href={`#${props.filter}`} onClick={handleClick}>\n      {props.children}\n    </a>\n  );\n}\n\nexport default React.memo(FilterLink);\n","import React from 'react';\nimport FilterLink from './FilterLink';\n\nconst Footer = () => (\n  <p>\n    显示: <FilterLink filter=\"SHOW_ALL\">所有</FilterLink>\n    {', '}\n    <FilterLink filter=\"SHOW_ACTIVE\">未完成</FilterLink>\n    {', '}\n    <FilterLink filter=\"SHOW_COMPLETED\">已完成</FilterLink>\n  </p>\n);\n\nexport default React.memo(Footer);\n","import React from 'react';\nimport AddTodo from './AddTodo';\nimport TodoList from './TodoList';\nimport Footer from './Footer';\n\nfunction TodoApp() {\n  return (\n    <div>\n      <AddTodo />\n      <TodoList />\n      <Footer />\n    </div>\n  );\n}\n\nexport default TodoApp;\n","import TodoApp from './TodoApp';\n\nexport default TodoApp;\n","/**\n * 待办事项列表reducer\n *\n * @param {Todo[]} [state=[]]\n * @param {(AddTodoAction | ToggleTodoAction)} action\n * @returns\n */\nfunction todos(state: Todo[] = [], action: AddTodoAction | ToggleTodoAction) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [...state, action.payload];\n    case 'TOGGLE_TODO':\n      return state.map((todo) =>\n        todo.id === action.payload\n          ? { ...todo, completed: !todo.completed }\n          : todo,\n      );\n    default:\n      return state;\n  }\n}\n\nexport default todos;\n","/**\n * 过滤条件reducer\n *\n * @param {VISIBILITY_FILTER} [state='SHOW_ALL']\n * @param {SetVisibilityFilterAction} action\n * @returns\n */\nfunction visibilityFilter(\n  state: VISIBILITY_FILTER = 'SHOW_ALL',\n  action: SetVisibilityFilterAction,\n) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nexport default visibilityFilter;\n","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nconst todoApp = combineReducers({\n  todos,\n  visibilityFilter,\n});\n\nexport default todoApp;\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport TodoApp from './todo-app';\nimport todoApp from './reducers';\nimport './primitive.css';\n\nconst store = createStore(todoApp);\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <TodoApp />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}